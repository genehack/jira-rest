# NAME

JIRA::REST - Alternative Jira REST client

# VERSION

version 0.01

# SYNOPSIS

    use JIRA::REST;

    my $client = JIRA::REST->new(
        username => 'username',
        password => 'password',
        base_url => 'http://jira.mycompany.com',
    );
    my $issue = $client->get_issue( 'TICKET-12' );
    print $issue->{fields}{priority}{value}{name}."\n";

# DESCRIPTION

JIRA::REST is a wrapper for the [JIRA REST API](http://docs.atlassian.com/jira/REST/latest/).  It is a thin wrapper,
returning the decoded version of the JSON without any munging or mangling.

JIRA::REST is \*heavily\* based upon [JIRA::Client::REST](https://metacpan.org/pod/JIRA::Client::REST). The primary
difference is that the latter library uses [Net::HTTP::Spore](https://metacpan.org/pod/Net::HTTP::Spore), and this
library just uses [LWP](https://metacpan.org/pod/LWP) directly. Additionally, this library has more
flexible and (IMO) more sane method signatures. Finally, this library also
currently implements more of the JIRA REST API than [JIRA::Client::REST](https://metacpan.org/pod/JIRA::Client::REST)

# ATTRIBUTES

## api\_prefix

Set/Get the initial part of the URL for the JIRA instance

Example: '/rest/api/latest/'

Default: '/rest/api/latest/'

## base\_url

Set/Get the base host part of the URL for the JIRA instance.

Example: 'https://jira.yourcompany.com'

No default; required attribute.

## debug

Debug flag. Makes the copious outputs.

## password

Set/Get the password to use when connecting to JIRA.

## username

Set/Get the username to use when connecting to JIRA.

# METHODS

## create\_issue( %args )

Create an issue with the provided arguments. Returns the issue ID for the
newly generated issue or throws an exception.

Example:

    my $new_issue_id = $client->create_issue(
      fields => {
        assignee    => { name => 'jira.username' } ,
        project     => { key => 'PROJECTKEY' } ,
        summary     => 'short summary' ,
        description => 'long description' ,
        issuetype   => { name => 'Type' } ,
      },
    );

## delete\_issue\_link( %args )

Delete a link between two issues

## get\_issue( %args )

Get the issue with the supplied id.  Returns a HashRef of data.

## get\_issue\_createmeta( %args )

Get the meta data (required and optional fields, etc.) for creating issues.

## get\_issue\_link\_types()

Get a list of all possible issue link types

## get\_issue\_transitions( %args )

Get the transitions possible for this issue by the current user.

## get\_issue\_votes( %args )

Get voters on the issue.

## get\_issue\_watchers( %args )

Get watchers on the issue.

## get\_project( %args )

Get the project for the specifed key.

## get\_project\_versions( %args )

Get the versions for the project with the specified key.

## get\_version( %args )

Get the version with the specified id.

## link\_issues( %args )

Link together two issues

## post\_comment( %args )

Post a comment on an issue

## search( %args )

Search for issues

## unvote\_for\_issue( %args )

Remove your vote from an issue.

## unwatch\_issue( %args )

Remove a watcher from an issue.

## vote\_for\_issue( %args )

Cast your vote in favor of an issue.

## watch\_issue( %args )

Watch an issue. (Or have someone else watch it.)

# AUTHOR

John SJ Anderson <john.anderson@iinteractive.com>

# COPYRIGHT AND LICENSE

This software is copyright (c) 2012 by Infinity Interactive.

This is free software; you can redistribute it and/or modify it under
the same terms as the Perl 5 programming language system itself.
